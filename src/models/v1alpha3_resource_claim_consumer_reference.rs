/*
 * Kubernetes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.31.3
 * 
 * Generated by: https://openapi-generator.tech
 */

/// V1alpha3ResourceClaimConsumerReference : ResourceClaimConsumerReference contains enough information to let you locate the consumer of a ResourceClaim. The user must be a resource in the same namespace as the ResourceClaim.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct V1alpha3ResourceClaimConsumerReference {
    /// APIGroup is the group for the resource being referenced. It is empty for the core API. This matches the group in the APIVersion that is used when creating the resources.
    #[serde(rename = "apiGroup", skip_serializing_if = "Option::is_none")]
    pub api_group: Option<String>,
    /// Name is the name of resource being referenced.
    #[serde(rename = "name")]
    pub name: String,
    /// Resource is the type of resource being referenced, for example \"pods\".
    #[serde(rename = "resource")]
    pub resource: String,
    /// UID identifies exactly one incarnation of the resource.
    #[serde(rename = "uid")]
    pub uid: String,
}

impl V1alpha3ResourceClaimConsumerReference {
    /// ResourceClaimConsumerReference contains enough information to let you locate the consumer of a ResourceClaim. The user must be a resource in the same namespace as the ResourceClaim.
    pub fn new(name: String, resource: String, uid: String) -> V1alpha3ResourceClaimConsumerReference {
        V1alpha3ResourceClaimConsumerReference {
            api_group: None,
            name,
            resource,
            uid,
        }
    }
}


